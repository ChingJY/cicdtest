name: 'Google Chat Notification'
description: 'Send a notification to Google Chat'
inputs:
  webhook_url:
    description: 'Google Chat webhook URL'
    required: true
  title:
    description: 'Title for the card header'
    required: false
    default: "Android App Notification"
  message:
    description: 'Message for the section'
    required: true
  version_name:
    description: 'Version name of the app'
    required: false
  key_value_pairs:
    description: 'Key-value pairs to display (format: key1=value1\nkey2=value2)'
    required: false
  buttons:
    description: 'Buttons to add (format: text1::url1\ntext2::url2)'
    required: false
runs:
  using: "composite"
  steps:
    - name: Send notification
      shell: bash
      env:
        WEBHOOK_URL: ${{ inputs.webhook_url }}
        HEADER_TITLE: ${{ inputs.title }}
        MESSAGE: ${{ inputs.message }}
        VERSION_NAME: ${{ inputs.version_name }}
        KEY_VALUE_PAIRS: ${{ inputs.key_value_pairs }}
        BUTTONS: ${{ inputs.buttons }}
      run: |
        # Function to create decorated text widgets
        create_decorated_text_widgets() {
          local items=()
          while IFS= read -r line; do
            line=$(echo -n "$line" | tr -d '\n\r')
            IFS='=' read -r key value <<< "$line"
            if [ -n "$key" ] && [ -n "$value" ]; then
              items+=("{\"decoratedText\":{\"topLabel\":\"$key\",\"text\":\"$value\"}}")
            fi
          done <<< "$1"
          local result=$(IFS=,; echo "${items[*]}")
          echo "$result"
        }

        # Function to create button list widget
        create_button_list_widget() {
          local items=()
          while IFS= read -r line; do
            line=$(echo -n "$line" | tr -d '\n\r')
            text=${line%%::*}
            url=${line#*::}
            if [ -n "$text" ] && [ -n "$url" ]; then
              items+=("{\"text\":\"$text\",\"onClick\":{\"openLink\":{\"url\":\"$url\"}}}")
            fi
          done <<< "$1"
          local buttons=$(IFS=,; echo "${items[*]}")
          echo "$buttons"
        }

        # Create widgets
        key_value_widgets=$(create_decorated_text_widgets "$KEY_VALUE_PAIRS")
        buttons=$(create_button_list_widget "$BUTTONS")
        
        # Prepare the button section if buttons are provided
        button_section=""
        if [ -n "$buttons" ]; then
          button_section=',{
            "widgets": [
              {
                "buttonList": {
                  "buttons": ['$buttons']
                }
              }
            ]
          }'
        fi

        # Construct the final JSON payload
        json_payload=$(cat <<EOF
        {
          "cardsV2": [{
            "cardId": "unique-card-id",
            "card": {
              "header": {
                "title": "$HEADER_TITLE"
              },
              "sections": [
                {
                  "widgets": [
                    {
                      "textParagraph": {
                        "text": "$MESSAGE"
                      }
                    },
                    {
                      "decoratedText": {
                        "topLabel": "App Version",
                        "text": "${VERSION_NAME:-N/A}"
                      }
                    },
                    {
                      "decoratedText": {
                        "topLabel": "Branch",
                        "text": "${{ github.ref_name }}"
                      }
                    },
                    {
                      "decoratedText": {
                        "topLabel": "Author",
                        "text": "${{ github.actor }}"
                      }
                    },
                    $([ -n "$key_value_widgets" ] && echo "$key_value_widgets,")
                    {
                      "textParagraph": {
                        "text": "${{ github.event.head_commit.message }}"
                      }
                    }
                  ]
                }$button_section
              ]
            }
          }]
        }
        EOF
        )

        # Send the notification
        curl -H "Content-Type: application/json" -X POST -d "$json_payload" "$WEBHOOK_URL"
