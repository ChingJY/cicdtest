name: 'Google Chat Notification'
description: 'Send a notification to Google Chat'
inputs:
  webhook_url:
    description: 'Google Chat webhook URL'
    required: true
  title:
    description: 'Title for the card header'
    required: false
    default: "Android App Notification"
  message:
    description: 'Message for the section'
    required: true
  version_name:
    description: 'Version name of the app'
    required: false
  key_value_pairs:
    description: 'Key-value pairs to display (format: key1=value1\nkey2=value2)'
    required: false
  buttons:
    description: 'Buttons to add (format: text1::url1\ntext2::url2)'
    required: false
runs:
  using: "composite"
  steps:
    - name: Send notification
      shell: bash
      env:
        WEBHOOK_URL: ${{ inputs.webhook_url }}
        HEADER_TITLE: ${{ inputs.title }}
        MESSAGE: ${{ inputs.message }}
        VERSION_NAME: ${{ inputs.version_name }}
        KEY_VALUE_PAIRS: ${{ inputs.key_value_pairs }}
        BUTTONS: ${{ inputs.buttons }}
      run: |
        # Function to create decorated text widgets
        create_decorated_text_widgets() {
          local result=""
          while IFS= read -r line; do
            line=$(echo -n "$line" | tr -d '\n\r')
            IFS='=' read -r key value <<< "$line"
            if [ -n "$key" ] && [ -n "$value" ]; then
              result+="{\"decoratedText\":{\"topLabel\":\"$key\",\"text\":\"$value\"}},\n"
            fi
          done <<< "$1"
          echo "${result%,\n}"  # Remove trailing comma and newline
        }

        # Function to create button list widget
        create_button_list_widget() {
          local result="{\"buttonList\":{\"buttons\":["
          while IFS= read -r line; do
            line=$(echo -n "$line" | tr -d '\n\r')
            IFS='::' read -r text url <<< "$line"
            if [ -n "$text" ] && [ -n "$url" ]; then
              result+="{\"text\":\"$text\",\"onClick\":{\"openLink\":{\"url\":\"$url\"}}},"
            fi
          done <<< "$1"
          result="${result%,}]}}"  # Remove trailing comma and close the structure
          echo "$result"
        }

        # Create widgets
        decorated_text_widgets=$(create_decorated_text_widgets "$KEY_VALUE_PAIRS")
        button_list_widget=$(create_button_list_widget "$BUTTONS")

        # Construct the final JSON payload
        json_payload=$(cat <<EOF
          {
            "cardsV2": [
              {
                "card": {
                  "header": {
                    "title": "$HEADER_TITLE",
                    "imageUrl": "https://cdn.voicetube.com/assets/img/app_logo/android.png",
                    "imageType": "CIRCLE"
                  },
                  "sections": [
                    {
                      "collapsible": true,
                      "uncollapsibleWidgetsCount": 1,
                      "widgets": [
                        {
                          "textParagraph": {
                            "text": "$MESSAGE"
                          }
                        },
                        {
                          "decoratedText": {
                            "topLabel": "App Version",
                            "text": "${VERSION_NAME:-N/A}"
                          }
                        },
                        {
                          "decoratedText": {
                            "topLabel": "Branch",
                            "text": "${{ github.ref_name }}"
                          }
                        },
                        {
                          "decoratedText": {
                            "topLabel": "Author",
                            "text": "${{ github.actor }}"
                          }
                        }$([ -n "$decorated_text_widgets" ] && echo ",
                        $decorated_text_widgets")$([ -n "$button_list_widget" ] && echo ",
                        $button_list_widget")
                      ]
                    }
                  ]
                }
              }
            ]
          }
        EOF
        )

        # Send the notification
        curl -H "Content-Type: application/json" -X POST -d "$json_payload" "$WEBHOOK_URL"
